"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMpnSearchLazyQuery = exports.useMpnSearchQuery = exports.MpnSearchDocument = exports.SupSortDirection = exports.SupRole = exports.SupPlanTier = exports.SupPartLifeCycle = exports.SupNexarFeatureId = exports.ManViolationType = exports.ManSourcing = exports.ManSolderMaskColour = exports.ManSilkScreenColour = exports.ManSide = exports.ManShippingCarrier = exports.ManQuoteCategory = exports.ManPaymentMethod = exports.ManPathType = exports.ManPartStatus = exports.ManPartIssue = exports.ManOrderStatus = exports.ManOrderEventType = exports.ManMountingType = exports.ManLayerType = exports.ManCurrency = exports.ManAccess = exports.DesUserPictureSize = exports.DesTaskStatus = exports.DesTaskPriority = exports.DesPrimitiveShape = exports.DesPinElectricalType = exports.DesParameterType = exports.DesPadType = exports.DesLayerType = exports.DesJobStatus = exports.DesContentTypeKind = exports.DatScrJobState = exports.DatBomPartSearchStrategy = exports.DatBomAnalysisResultLevel = exports.DatBomAnalysisLevel = exports.ApplyPolicy = void 0;
var client_1 = require("@apollo/client");
var Apollo = __importStar(require("@apollo/client"));
var defaultOptions = {};
var ApplyPolicy;
(function (ApplyPolicy) {
    ApplyPolicy["AfterResolver"] = "AFTER_RESOLVER";
    ApplyPolicy["BeforeResolver"] = "BEFORE_RESOLVER";
})(ApplyPolicy = exports.ApplyPolicy || (exports.ApplyPolicy = {}));
var DatBomAnalysisLevel;
(function (DatBomAnalysisLevel) {
    DatBomAnalysisLevel["Error"] = "ERROR";
    DatBomAnalysisLevel["Suggestion"] = "SUGGESTION";
    DatBomAnalysisLevel["Warning"] = "WARNING";
})(DatBomAnalysisLevel = exports.DatBomAnalysisLevel || (exports.DatBomAnalysisLevel = {}));
var DatBomAnalysisResultLevel;
(function (DatBomAnalysisResultLevel) {
    DatBomAnalysisResultLevel["Error"] = "ERROR";
    DatBomAnalysisResultLevel["Suggestion"] = "SUGGESTION";
    DatBomAnalysisResultLevel["Warning"] = "WARNING";
})(DatBomAnalysisResultLevel = exports.DatBomAnalysisResultLevel || (exports.DatBomAnalysisResultLevel = {}));
var DatBomPartSearchStrategy;
(function (DatBomPartSearchStrategy) {
    DatBomPartSearchStrategy["Exact"] = "EXACT";
    DatBomPartSearchStrategy["Fuzzy"] = "FUZZY";
    DatBomPartSearchStrategy["Partial"] = "PARTIAL";
})(DatBomPartSearchStrategy = exports.DatBomPartSearchStrategy || (exports.DatBomPartSearchStrategy = {}));
/** Possible states of an SCR processing run. */
var DatScrJobState;
(function (DatScrJobState) {
    /** Job has completed successfully. */
    DatScrJobState["Completed"] = "COMPLETED";
    /** The job has failed to process the data. */
    DatScrJobState["Failed"] = "FAILED";
    /** The job is still processing the data. */
    DatScrJobState["Running"] = "RUNNING";
    /** Job is in an unknown state. */
    DatScrJobState["Unknown"] = "UNKNOWN";
})(DatScrJobState = exports.DatScrJobState || (exports.DatScrJobState = {}));
var DesContentTypeKind;
(function (DesContentTypeKind) {
    DesContentTypeKind["BinaryFile"] = "BINARY_FILE";
    DesContentTypeKind["BmsAutoGeneratedComponents"] = "BMS_AUTO_GENERATED_COMPONENTS";
    DesContentTypeKind["BomTemplate"] = "BOM_TEMPLATE";
    DesContentTypeKind["Component"] = "COMPONENT";
    DesContentTypeKind["ComponentTemplate"] = "COMPONENT_TEMPLATE";
    DesContentTypeKind["DataClass"] = "DATA_CLASS";
    DesContentTypeKind["DataSheet"] = "DATA_SHEET";
    DesContentTypeKind["DeviceClass"] = "DEVICE_CLASS";
    DesContentTypeKind["DraftsmanDocumentTemplate"] = "DRAFTSMAN_DOCUMENT_TEMPLATE";
    DesContentTypeKind["DraftsmanSheetTemplate"] = "DRAFTSMAN_SHEET_TEMPLATE";
    DesContentTypeKind["DxpAddon"] = "DXP_ADDON";
    DesContentTypeKind["DxpPlatform"] = "DXP_PLATFORM";
    DesContentTypeKind["DxpPlugin"] = "DXP_PLUGIN";
    DesContentTypeKind["DxpSdk"] = "DXP_SDK";
    DesContentTypeKind["EmbeddedDesign"] = "EMBEDDED_DESIGN";
    DesContentTypeKind["FpgaDesign"] = "FPGA_DESIGN";
    DesContentTypeKind["LayerStack"] = "LAYER_STACK";
    DesContentTypeKind["Model3D"] = "MODEL3D";
    DesContentTypeKind["MorfikPackage"] = "MORFIK_PACKAGE";
    DesContentTypeKind["MorfikWebResource"] = "MORFIK_WEB_RESOURCE";
    DesContentTypeKind["MorfikXAppDesign"] = "MORFIK_X_APP_DESIGN";
    DesContentTypeKind["MorfikXAppImage"] = "MORFIK_X_APP_IMAGE";
    DesContentTypeKind["MorfikXAppSet"] = "MORFIK_X_APP_SET";
    DesContentTypeKind["OpenBus"] = "OPEN_BUS";
    DesContentTypeKind["OutputJob"] = "OUTPUT_JOB";
    DesContentTypeKind["PartChoiceList"] = "PART_CHOICE_LIST";
    DesContentTypeKind["PcbAssembly"] = "PCB_ASSEMBLY";
    DesContentTypeKind["PcbBlank"] = "PCB_BLANK";
    DesContentTypeKind["PcbBlock"] = "PCB_BLOCK";
    DesContentTypeKind["PcbComponent"] = "PCB_COMPONENT";
    DesContentTypeKind["PcbDesign"] = "PCB_DESIGN";
    DesContentTypeKind["PcbDocument"] = "PCB_DOCUMENT";
    DesContentTypeKind["PcbModel3D"] = "PCB_MODEL3D";
    DesContentTypeKind["PlmInstance"] = "PLM_INSTANCE";
    DesContentTypeKind["PlmPublishTemplate"] = "PLM_PUBLISH_TEMPLATE";
    DesContentTypeKind["Preferences"] = "PREFERENCES";
    DesContentTypeKind["Project"] = "PROJECT";
    DesContentTypeKind["ProjectReviewPackage"] = "PROJECT_REVIEW_PACKAGE";
    DesContentTypeKind["ProjectTemplate"] = "PROJECT_TEMPLATE";
    DesContentTypeKind["RichText"] = "RICH_TEXT";
    DesContentTypeKind["SchematicSheet"] = "SCHEMATIC_SHEET";
    DesContentTypeKind["SchematicTemplate"] = "SCHEMATIC_TEMPLATE";
    DesContentTypeKind["Script"] = "SCRIPT";
    DesContentTypeKind["SimulationModel"] = "SIMULATION_MODEL";
    DesContentTypeKind["SiModel"] = "SI_MODEL";
    DesContentTypeKind["Symbol"] = "SYMBOL";
    DesContentTypeKind["WebItem"] = "WEB_ITEM";
})(DesContentTypeKind = exports.DesContentTypeKind || (exports.DesContentTypeKind = {}));
var DesJobStatus;
(function (DesJobStatus) {
    DesJobStatus["Done"] = "DONE";
    DesJobStatus["Error"] = "ERROR";
    DesJobStatus["Pending"] = "PENDING";
    DesJobStatus["Processing"] = "PROCESSING";
})(DesJobStatus = exports.DesJobStatus || (exports.DesJobStatus = {}));
var DesLayerType;
(function (DesLayerType) {
    DesLayerType["Abstract"] = "ABSTRACT";
    DesLayerType["Adhesive"] = "ADHESIVE";
    DesLayerType["BikiniCoverlay"] = "BIKINI_COVERLAY";
    DesLayerType["Conductive"] = "CONDUCTIVE";
    DesLayerType["Core"] = "CORE";
    DesLayerType["Dielectric"] = "DIELECTRIC";
    DesLayerType["Foil"] = "FOIL";
    DesLayerType["Mechanical"] = "MECHANICAL";
    DesLayerType["Misc"] = "MISC";
    DesLayerType["NonConductive"] = "NON_CONDUCTIVE";
    DesLayerType["Overlay"] = "OVERLAY";
    DesLayerType["PasteMask"] = "PASTE_MASK";
    DesLayerType["PeLayer"] = "PE_LAYER";
    DesLayerType["Physical"] = "PHYSICAL";
    DesLayerType["Plane"] = "PLANE";
    DesLayerType["Plating"] = "PLATING";
    DesLayerType["Prepreg"] = "PREPREG";
    DesLayerType["Signal"] = "SIGNAL";
    DesLayerType["SolderMask"] = "SOLDER_MASK";
    DesLayerType["Stiffener"] = "STIFFENER";
    DesLayerType["SurfaceFinish"] = "SURFACE_FINISH";
    DesLayerType["Unknown"] = "UNKNOWN";
})(DesLayerType = exports.DesLayerType || (exports.DesLayerType = {}));
var DesPadType;
(function (DesPadType) {
    DesPadType["Free"] = "FREE";
    DesPadType["Smd"] = "SMD";
})(DesPadType = exports.DesPadType || (exports.DesPadType = {}));
var DesParameterType;
(function (DesParameterType) {
    DesParameterType["Capacitance"] = "CAPACITANCE";
    DesParameterType["Charge"] = "CHARGE";
    DesParameterType["Conductance"] = "CONDUCTANCE";
    DesParameterType["Current"] = "CURRENT";
    DesParameterType["Decibels"] = "DECIBELS";
    DesParameterType["Frequency"] = "FREQUENCY";
    DesParameterType["Impedance"] = "IMPEDANCE";
    DesParameterType["Inductance"] = "INDUCTANCE";
    DesParameterType["Length"] = "LENGTH";
    DesParameterType["Mass"] = "MASS";
    DesParameterType["None"] = "NONE";
    DesParameterType["Percent"] = "PERCENT";
    DesParameterType["Power"] = "POWER";
    DesParameterType["Resistance"] = "RESISTANCE";
    DesParameterType["Temperature"] = "TEMPERATURE";
    DesParameterType["Text"] = "TEXT";
    DesParameterType["Time"] = "TIME";
    DesParameterType["Voltage"] = "VOLTAGE";
})(DesParameterType = exports.DesParameterType || (exports.DesParameterType = {}));
var DesPinElectricalType;
(function (DesPinElectricalType) {
    DesPinElectricalType["HiZ"] = "HI_Z";
    DesPinElectricalType["Input"] = "INPUT";
    DesPinElectricalType["Io"] = "IO";
    DesPinElectricalType["OpenCollector"] = "OPEN_COLLECTOR";
    DesPinElectricalType["OpenEmitter"] = "OPEN_EMITTER";
    DesPinElectricalType["Output"] = "OUTPUT";
    DesPinElectricalType["Passive"] = "PASSIVE";
    DesPinElectricalType["Power"] = "POWER";
})(DesPinElectricalType = exports.DesPinElectricalType || (exports.DesPinElectricalType = {}));
var DesPrimitiveShape;
(function (DesPrimitiveShape) {
    DesPrimitiveShape["Rectangle"] = "RECTANGLE";
    DesPrimitiveShape["Round"] = "ROUND";
    DesPrimitiveShape["RoundedRectangle"] = "ROUNDED_RECTANGLE";
})(DesPrimitiveShape = exports.DesPrimitiveShape || (exports.DesPrimitiveShape = {}));
var DesTaskPriority;
(function (DesTaskPriority) {
    DesTaskPriority["High"] = "HIGH";
    DesTaskPriority["Highest"] = "HIGHEST";
    DesTaskPriority["Low"] = "LOW";
    DesTaskPriority["Medium"] = "MEDIUM";
    DesTaskPriority["Undefined"] = "UNDEFINED";
})(DesTaskPriority = exports.DesTaskPriority || (exports.DesTaskPriority = {}));
var DesTaskStatus;
(function (DesTaskStatus) {
    DesTaskStatus["InProgress"] = "IN_PROGRESS";
    DesTaskStatus["Resolved"] = "RESOLVED";
    DesTaskStatus["ToDo"] = "TO_DO";
    DesTaskStatus["Undefined"] = "UNDEFINED";
})(DesTaskStatus = exports.DesTaskStatus || (exports.DesTaskStatus = {}));
var DesUserPictureSize;
(function (DesUserPictureSize) {
    DesUserPictureSize["Original"] = "ORIGINAL";
    DesUserPictureSize["Size48X48"] = "SIZE48X48";
    DesUserPictureSize["Size70X70"] = "SIZE70X70";
    DesUserPictureSize["Size128X128"] = "SIZE128X128";
})(DesUserPictureSize = exports.DesUserPictureSize || (exports.DesUserPictureSize = {}));
var ManAccess;
(function (ManAccess) {
    ManAccess["AllowMpn"] = "ALLOW_MPN";
    ManAccess["IsCreator"] = "IS_CREATOR";
    ManAccess["IsEms"] = "IS_EMS";
})(ManAccess = exports.ManAccess || (exports.ManAccess = {}));
var ManCurrency;
(function (ManCurrency) {
    ManCurrency["Usd"] = "USD";
})(ManCurrency = exports.ManCurrency || (exports.ManCurrency = {}));
var ManLayerType;
(function (ManLayerType) {
    ManLayerType["Core"] = "CORE";
    ManLayerType["Coverlay"] = "COVERLAY";
    ManLayerType["Overlay"] = "OVERLAY";
    ManLayerType["Plane"] = "PLANE";
    ManLayerType["PrePreg"] = "PRE_PREG";
    ManLayerType["Signal"] = "SIGNAL";
    ManLayerType["SolderMask"] = "SOLDER_MASK";
    ManLayerType["SurfaceFinish"] = "SURFACE_FINISH";
})(ManLayerType = exports.ManLayerType || (exports.ManLayerType = {}));
var ManMountingType;
(function (ManMountingType) {
    ManMountingType["SurfaceMount"] = "SURFACE_MOUNT";
    ManMountingType["ThroughHole"] = "THROUGH_HOLE";
})(ManMountingType = exports.ManMountingType || (exports.ManMountingType = {}));
var ManOrderEventType;
(function (ManOrderEventType) {
    ManOrderEventType["Accepted"] = "ACCEPTED";
    ManOrderEventType["Batched"] = "BATCHED";
    ManOrderEventType["Cancel"] = "CANCEL";
    ManOrderEventType["ConsignmentDetails"] = "CONSIGNMENT_DETAILS";
    ManOrderEventType["Created"] = "CREATED";
    ManOrderEventType["EmsAccepted"] = "EMS_ACCEPTED";
    ManOrderEventType["Paid"] = "PAID";
    ManOrderEventType["PartsOrdered"] = "PARTS_ORDERED";
    ManOrderEventType["PartsReceived"] = "PARTS_RECEIVED";
    ManOrderEventType["PcbsOrdered"] = "PCBS_ORDERED";
    ManOrderEventType["PcbsReceived"] = "PCBS_RECEIVED";
    ManOrderEventType["ProcessStart"] = "PROCESS_START";
    ManOrderEventType["Received"] = "RECEIVED";
    ManOrderEventType["Reviewed"] = "REVIEWED";
    ManOrderEventType["Shipped"] = "SHIPPED";
    ManOrderEventType["TimeEstimation"] = "TIME_ESTIMATION";
})(ManOrderEventType = exports.ManOrderEventType || (exports.ManOrderEventType = {}));
var ManOrderStatus;
(function (ManOrderStatus) {
    ManOrderStatus["Cancelled"] = "CANCELLED";
    ManOrderStatus["Complete"] = "COMPLETE";
    ManOrderStatus["Manufacturing"] = "MANUFACTURING";
    ManOrderStatus["PaymentProcessing"] = "PAYMENT_PROCESSING";
    ManOrderStatus["Placed"] = "PLACED";
    ManOrderStatus["Processing"] = "PROCESSING";
    ManOrderStatus["Quoting"] = "QUOTING";
    ManOrderStatus["Shipping"] = "SHIPPING";
})(ManOrderStatus = exports.ManOrderStatus || (exports.ManOrderStatus = {}));
var ManPartIssue;
(function (ManPartIssue) {
    ManPartIssue["BadLifecycle"] = "BAD_LIFECYCLE";
    ManPartIssue["InsufficientStock"] = "INSUFFICIENT_STOCK";
    ManPartIssue["NotFound"] = "NOT_FOUND";
    ManPartIssue["NoSelection"] = "NO_SELECTION";
    ManPartIssue["StockLow"] = "STOCK_LOW";
    ManPartIssue["Unavailable"] = "UNAVAILABLE";
})(ManPartIssue = exports.ManPartIssue || (exports.ManPartIssue = {}));
var ManPartStatus;
(function (ManPartStatus) {
    ManPartStatus["Good"] = "GOOD";
    ManPartStatus["Issue"] = "ISSUE";
    ManPartStatus["Warn"] = "WARN";
})(ManPartStatus = exports.ManPartStatus || (exports.ManPartStatus = {}));
var ManPathType;
(function (ManPathType) {
    ManPathType["Arc"] = "ARC";
    ManPathType["Vertex"] = "VERTEX";
})(ManPathType = exports.ManPathType || (exports.ManPathType = {}));
var ManPaymentMethod;
(function (ManPaymentMethod) {
    ManPaymentMethod["CreditCard"] = "CREDIT_CARD";
    ManPaymentMethod["DirectApproval"] = "DIRECT_APPROVAL";
})(ManPaymentMethod = exports.ManPaymentMethod || (exports.ManPaymentMethod = {}));
var ManQuoteCategory;
(function (ManQuoteCategory) {
    ManQuoteCategory["Assembly"] = "ASSEMBLY";
    ManQuoteCategory["Bom"] = "BOM";
    ManQuoteCategory["Fabrication"] = "FABRICATION";
    ManQuoteCategory["Nre"] = "NRE";
    ManQuoteCategory["Shipping"] = "SHIPPING";
})(ManQuoteCategory = exports.ManQuoteCategory || (exports.ManQuoteCategory = {}));
var ManShippingCarrier;
(function (ManShippingCarrier) {
    ManShippingCarrier["Ups"] = "UPS";
    ManShippingCarrier["Usps"] = "USPS";
})(ManShippingCarrier = exports.ManShippingCarrier || (exports.ManShippingCarrier = {}));
var ManSide;
(function (ManSide) {
    ManSide["Bottom"] = "BOTTOM";
    ManSide["Top"] = "TOP";
})(ManSide = exports.ManSide || (exports.ManSide = {}));
var ManSilkScreenColour;
(function (ManSilkScreenColour) {
    ManSilkScreenColour["Black"] = "BLACK";
    ManSilkScreenColour["Blue"] = "BLUE";
    ManSilkScreenColour["Green"] = "GREEN";
    ManSilkScreenColour["Red"] = "RED";
    ManSilkScreenColour["White"] = "WHITE";
    ManSilkScreenColour["Yellow"] = "YELLOW";
})(ManSilkScreenColour = exports.ManSilkScreenColour || (exports.ManSilkScreenColour = {}));
var ManSolderMaskColour;
(function (ManSolderMaskColour) {
    ManSolderMaskColour["Black"] = "BLACK";
    ManSolderMaskColour["Blue"] = "BLUE";
    ManSolderMaskColour["DarkBrown"] = "DARK_BROWN";
    ManSolderMaskColour["Green"] = "GREEN";
    ManSolderMaskColour["LightGreen"] = "LIGHT_GREEN";
    ManSolderMaskColour["MatteBlack"] = "MATTE_BLACK";
    ManSolderMaskColour["MatteGreen"] = "MATTE_GREEN";
    ManSolderMaskColour["Red"] = "RED";
    ManSolderMaskColour["Transparent"] = "TRANSPARENT";
    ManSolderMaskColour["White"] = "WHITE";
    ManSolderMaskColour["Yellow"] = "YELLOW";
})(ManSolderMaskColour = exports.ManSolderMaskColour || (exports.ManSolderMaskColour = {}));
var ManSourcing;
(function (ManSourcing) {
    ManSourcing["Altimade"] = "ALTIMADE";
    ManSourcing["Consign"] = "CONSIGN";
    ManSourcing["Dnp"] = "DNP";
})(ManSourcing = exports.ManSourcing || (exports.ManSourcing = {}));
var ManViolationType;
(function (ManViolationType) {
    ManViolationType["Inconsistent"] = "INCONSISTENT";
    ManViolationType["TooBig"] = "TOO_BIG";
    ManViolationType["TooSmall"] = "TOO_SMALL";
    ManViolationType["Unknown"] = "UNKNOWN";
    ManViolationType["Unsupported"] = "UNSUPPORTED";
})(ManViolationType = exports.ManViolationType || (exports.ManViolationType = {}));
var SupNexarFeatureId;
(function (SupNexarFeatureId) {
    SupNexarFeatureId["CadModels"] = "CAD_MODELS";
    SupNexarFeatureId["Datasheets"] = "DATASHEETS";
    SupNexarFeatureId["InventoryHistory"] = "INVENTORY_HISTORY";
    SupNexarFeatureId["LeadTime"] = "LEAD_TIME";
    SupNexarFeatureId["Lifecycle"] = "LIFECYCLE";
    SupNexarFeatureId["SimilarParts"] = "SIMILAR_PARTS";
    SupNexarFeatureId["SpellingCorrections"] = "SPELLING_CORRECTIONS";
    SupNexarFeatureId["Suggestions"] = "SUGGESTIONS";
    SupNexarFeatureId["TechSpecs"] = "TECH_SPECS";
})(SupNexarFeatureId = exports.SupNexarFeatureId || (exports.SupNexarFeatureId = {}));
var SupPartLifeCycle;
(function (SupPartLifeCycle) {
    SupPartLifeCycle["Active"] = "ACTIVE";
    SupPartLifeCycle["ActiveUnconfirmed"] = "ACTIVE_UNCONFIRMED";
    SupPartLifeCycle["ContactMfr"] = "CONTACT_MFR";
    SupPartLifeCycle["Discontinued"] = "DISCONTINUED";
    SupPartLifeCycle["DiscontinuedUnconfirmed"] = "DISCONTINUED_UNCONFIRMED";
    SupPartLifeCycle["Eol"] = "EOL";
    SupPartLifeCycle["New"] = "NEW";
    SupPartLifeCycle["Nrfnd"] = "NRFND";
    SupPartLifeCycle["Transferred"] = "TRANSFERRED";
    SupPartLifeCycle["Unknown"] = "UNKNOWN";
})(SupPartLifeCycle = exports.SupPartLifeCycle || (exports.SupPartLifeCycle = {}));
var SupPlanTier;
(function (SupPlanTier) {
    SupPlanTier["Basic"] = "BASIC";
    SupPlanTier["Enterprise"] = "ENTERPRISE";
    SupPlanTier["Free"] = "FREE";
    SupPlanTier["Pro"] = "PRO";
})(SupPlanTier = exports.SupPlanTier || (exports.SupPlanTier = {}));
var SupRole;
(function (SupRole) {
    SupRole["Cadmodels"] = "CADMODELS";
    SupRole["Distributor"] = "DISTRIBUTOR";
    SupRole["Internal"] = "INTERNAL";
    SupRole["Nexarinternal"] = "NEXARINTERNAL";
})(SupRole = exports.SupRole || (exports.SupRole = {}));
var SupSortDirection;
(function (SupSortDirection) {
    SupSortDirection["Asc"] = "asc";
    SupSortDirection["Desc"] = "desc";
})(SupSortDirection = exports.SupSortDirection || (exports.SupSortDirection = {}));
exports.MpnSearchDocument = (0, client_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    query mpnSearch($q: String, $country: String!, $currency: String!, $start: Int, $limit: Int, $sortDir: SupSortDirection, $inStockOnly: Boolean, $filters: Map, $distributorApi: Boolean, $distributorApiTimeout: String!, $authorizedOnly: Boolean!) {\n  supSearchMpn(\n    q: $q\n    country: $country\n    currency: $currency\n    start: $start\n    limit: $limit\n    sortDir: $sortDir\n    inStockOnly: $inStockOnly\n    filters: $filters\n    distributorApi: $distributorApi\n    distributorApiTimeout: $distributorApiTimeout\n  ) {\n    hits\n    appliedFilters {\n      shortname\n      name\n      values\n      displayValues\n    }\n    results {\n      _cacheId\n      akaMpn\n      description\n      part {\n        _cacheId\n        bestImage {\n          url\n        }\n        category {\n          id\n        }\n        descriptions {\n          text\n        }\n        freeSampleUrl\n        id\n        manufacturer {\n          id\n          isVerified\n          name\n        }\n        manufacturerUrl\n        medianPrice1000 {\n          _cacheId\n          convertedCurrency\n          convertedPrice\n        }\n        mpn\n        sellers(authorizedOnly: $authorizedOnly) {\n          _cacheId\n          company {\n            homepageUrl\n            id\n            isDistributorApi\n            isVerified\n            name\n            slug\n          }\n          isAuthorized\n          isBroker\n          isRfq\n          offers {\n            _cacheId\n            clickUrl\n            id\n            inventoryLevel\n            moq\n            packaging\n            prices {\n              _cacheId\n              conversionRate\n              convertedCurrency\n              convertedPrice\n              currency\n              price\n              quantity\n            }\n            sku\n            updated\n          }\n        }\n        series {\n          id\n          name\n          url\n        }\n        slug\n        v3uid\n      }\n    }\n  }\n}\n    "], ["\n    query mpnSearch($q: String, $country: String!, $currency: String!, $start: Int, $limit: Int, $sortDir: SupSortDirection, $inStockOnly: Boolean, $filters: Map, $distributorApi: Boolean, $distributorApiTimeout: String!, $authorizedOnly: Boolean!) {\n  supSearchMpn(\n    q: $q\n    country: $country\n    currency: $currency\n    start: $start\n    limit: $limit\n    sortDir: $sortDir\n    inStockOnly: $inStockOnly\n    filters: $filters\n    distributorApi: $distributorApi\n    distributorApiTimeout: $distributorApiTimeout\n  ) {\n    hits\n    appliedFilters {\n      shortname\n      name\n      values\n      displayValues\n    }\n    results {\n      _cacheId\n      akaMpn\n      description\n      part {\n        _cacheId\n        bestImage {\n          url\n        }\n        category {\n          id\n        }\n        descriptions {\n          text\n        }\n        freeSampleUrl\n        id\n        manufacturer {\n          id\n          isVerified\n          name\n        }\n        manufacturerUrl\n        medianPrice1000 {\n          _cacheId\n          convertedCurrency\n          convertedPrice\n        }\n        mpn\n        sellers(authorizedOnly: $authorizedOnly) {\n          _cacheId\n          company {\n            homepageUrl\n            id\n            isDistributorApi\n            isVerified\n            name\n            slug\n          }\n          isAuthorized\n          isBroker\n          isRfq\n          offers {\n            _cacheId\n            clickUrl\n            id\n            inventoryLevel\n            moq\n            packaging\n            prices {\n              _cacheId\n              conversionRate\n              convertedCurrency\n              convertedPrice\n              currency\n              price\n              quantity\n            }\n            sku\n            updated\n          }\n        }\n        series {\n          id\n          name\n          url\n        }\n        slug\n        v3uid\n      }\n    }\n  }\n}\n    "])));
/**
 * __useMpnSearchQuery__
 *
 * To run a query within a React component, call `useMpnSearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useMpnSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMpnSearchQuery({
 *   variables: {
 *      q: // value for 'q'
 *      country: // value for 'country'
 *      currency: // value for 'currency'
 *      start: // value for 'start'
 *      limit: // value for 'limit'
 *      sortDir: // value for 'sortDir'
 *      inStockOnly: // value for 'inStockOnly'
 *      filters: // value for 'filters'
 *      distributorApi: // value for 'distributorApi'
 *      distributorApiTimeout: // value for 'distributorApiTimeout'
 *      authorizedOnly: // value for 'authorizedOnly'
 *   },
 * });
 */
function useMpnSearchQuery(baseOptions) {
    var options = __assign(__assign({}, defaultOptions), baseOptions);
    return Apollo.useQuery(exports.MpnSearchDocument, options);
}
exports.useMpnSearchQuery = useMpnSearchQuery;
function useMpnSearchLazyQuery(baseOptions) {
    var options = __assign(__assign({}, defaultOptions), baseOptions);
    return Apollo.useLazyQuery(exports.MpnSearchDocument, options);
}
exports.useMpnSearchLazyQuery = useMpnSearchLazyQuery;
var templateObject_1;
